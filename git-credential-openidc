#!/bin/python3
import sys

from openidc_client import OpenIDCClient

host_idp_mapping = {
    'src.fedoraproject.org': ('prod', 'https://id.fedoraproject.org/openidc/'),
    'src.stg.fedoraproject.org': ('stg', 'https://id.stg.fedoraproject.org/openidc/'),
}
scopes = ['https://src.fedoraproject.org/push']


def get_client(proto, host):
    if proto == 'https':
        if host in host_idp_mapping:
            abbrev, idp = host_idp_mapping[host]
            return OpenIDCClient(
                app_identifier='git_credential_%s' % abbrev,
                id_provider=idp,
                id_provider_mapping={'Token': 'Token',
                                     'Authorization': 'Authorization'},
                client_id='mbs-authorizer',
                client_secret='notsecret',
                use_post=False,
                useragent='git-credential-helper',
                cachedir='~/.git_cred/')


def read_in():
    inp = {}
    for line in sys.stdin:
        vals = line.split('=', 2)
        if len(vals) != 2:
            print('Invalid input: %s' % line, file=sys.stderr)
            return {}
        inp[vals[0]] = vals[1].strip()
    return inp


def print_out(**kwargs):
    for arg in kwargs:
        print('%s=%s' % (arg, kwargs[arg]))
    print('')


def op_get():
    args = read_in()
    client = get_client(args.get('protocol'), args.get('host'))
    if client is None:
        # We do not know this proto/host combination.
        # Another credential helper can pick it up
        return
    args['username'] = '-openidc-'
    args['password'] = client.get_token(scopes)
    args['quit'] = '1'
    print_out(**args)


def op_store():
    print('Op store', file=sys.stderr)


def op_erase():
    args = read_in()
    client = get_client(args.get('protocol'), args.get('host'))
    if client is None:
        # We do not know this proto/host combination.
        # Another credential helper can pick it up
        return
    token = client.get_token(scopes, new_token=False)
    if token and token == args.get('password'):
        newtoken = client.report_token_issue()
        if newtoken is None:
            print('Issue with your token renewal', file=sys.stderr)
        else:
            print('Token was renewed. Please rerun command', file=sys.stderr)


if len(sys.argv) < 2:
    print('Missing operation', file=sys.stderr)
    sys.exit(1)

op = sys.argv[1]
if op == 'get':
    op_get()
elif op == 'store':
    # We do not have to store anything
    pass
elif op == 'erase':
    op_erase()
else:
    print('Invalid operation %s' % op, file=sys.stderr)
    sys.exit(1)
